grammar com.dslconsultancy.uiscript.xtext.UIScript with org.eclipse.xtext.common.Terminals

import "http://www.dslconsultancy.com/uicript/core"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.dslconsultancy.com/uicript/expressions" as expr
import "http://www.dslconsultancy.com/uicript/expressionsAux" as exprAux
import "http://www.dslconsultancy.com/uicript/services" as services
import "http://www.dslconsultancy.com/uicript/statements" as statements
import "http://www.dslconsultancy.com/uicript/structural" as structural
import "http://www.dslconsultancy.com/uicript/types" as types


/*
 * +------------+
 * | structural |
 * +------------+
 */

UiModule returns structural::UiModule:
	{structural::UiModule}
	'ui-module'
		(
			  (parametrisables+=Parametrisable)
			| (typeDefinitions+=TypeDefinition)
			| (services+=Service)
		)*
	;
	// TODO  consider adding "module globals" such as (immutable) parameters and error handling
	/*
	 * validation:
	 * 	the first screen of a module should not take any parameters, or the GotoModuleStatement should have arguments
	 */


/*
 * +----------+
 * | services |
 * +----------+
 */

Service returns services::Service:
	'service' name=ID
		method=HttpMethods
		inputType=DefinedTypeLiteral?
		( '->' outputType=TypeLiteral )?
		'url=' urlPattern=STRING
		documentation=STRING?
	;
	/*
	 * validation:
	 * 		1-  outputType is either a DefinedTypeLiteral or an ListTypeLiteral		[√]
	 * 		2-  inputType != null if method == POST									[√]
	 * 		3-  !(inputType == null && outputType == null)							[√]
	 */

enum HttpMethods returns services::HttpMethods:
	get='GET' | put='PUT' | post='POST' | delete='DELETE'
	;


/*
 * +-------+
 * | types |
 * +-------+
 */

TypeDefinition returns types::TypeDefinition:
	Structure | Enumeration;

Structure returns types::Structure:
	'structure' name=ID
		persistent?='persistent'?	// TODO  still required?
	'{'
		features+=Feature*
	'}'
	;
	/*
	 * validation:
	 * 		1-  #features > 0														[√]
	 * 		2-  !persistent || structure-typed-features.forAll[type.persistent] 	[√]
	 */
	/*
	 * semantics: corresponds to a JSON structure (+ all associated semantics, no references)
	 * 		as well as POJOs, controllers and CRUD servlets on the backend in case of the `persistent` marking
	 */

Feature returns types::Feature:
	name=ID optional?='optional'? ':' type=TypeLiteral
	;

Enumeration returns types::Enumeration:
	'enumeration' name=ID
	'{'
		literals+=EnumerationLiteral*
	'}'
	;
	/*
	 * validation:
	 * 		1-  #literals > 0					[√]
	 * 		2-  literals are uniquely-named		[ ]
	 */

EnumerationLiteral returns types::EnumerationLiteral:
	name=EnumerationName '->' displayName=STRING
	;

EnumerationName:
	ID | STRING | INT
	;


/*
 * +----------+
 * | literals |
 * +----------+
 */

TypeLiteral returns types::TypeLiteral:
	BuiltinTypeLiteral | DefinedTypeLiteral | ListTypeLiteral | SyntheticTypeLiteral
	;

BuiltinTypeLiteral returns types::BuiltinTypeLiteral:
	builtin=BuiltinTypes
	;

enum BuiltinTypes returns types::BuiltinTypes:
	  string='String'
	| boolean='Boolean'
	| integer='Integer'
	| url='URL'
	| text='Text'
	| number='Number'
	| email='Email'
	| phone='Phone'
	| date='Date'
	| password='Password'
	;
	// highlighting: just colored, not bold (=fugly)	[ ]

DefinedTypeLiteral returns types::DefinedTypeLiteral:
	type=[types::TypeDefinition]
	;
	// highlighting: render in italics					[ ]

ListTypeLiteral returns types::ListTypeLiteral:
	'[' itemType=TypeLiteral ']'
	;

SyntheticTypeLiteral returns types::SyntheticTypeLiteral:
	  {types::CallbackLiteral} 'Callback'				// semantics: the (type literal of) a [StatementBlock] in a `callback` feature
	| {types::CallbackErrorResponseLiteral} 'Error'		// semantics: the (type literal of) the response returned when an interface (AJAX) call fails
	| {types::VoidLiteral} '$Void'						// semantics: the (type literal of) void type
	;
	// validation: synthetic types can't be used in Structure		[√]



/*
 * +-----------------+
 * | parametrisation |
 * +-----------------+
 */

Parametrisable returns Parametrisable:
	MethodDefinition;	// | ComponentDefinition

Parameter returns Parameter:
	name=ID ':' type=TypeLiteral
	;

ParameterList returns ParameterList:
	{ParameterList}
	'(' parameters+=Parameter* ')'
	;

Argument returns Argument:
	parameter=[Parameter] '=' valueExpr=Expression
	;
	/*
	 * scoping: parameter in containing(ComponentInvocation).viewable	[√]
	 * validation: parameter.type.isAssignableFrom(valueExpr.type)		[√]
	 * 
	 * Note that arguments are named, so there's no dependency on parameter order!
	 */

ArgumentList returns ArgumentList:
	{ArgumentList}
	'(' arguments+=Argument* ')'
	;



/*
 * +--------+
 * | values |
 * +--------+
 */

ValuesBlock returns ValuesBlock:
	{ValuesBlock}
	'values' '{'
		declarations+=ValueDeclaration*
	'}'
	;

Value returns Value:
	name=ID
	;

ValueDeclaration returns ValueDeclaration:
	value=Value ( ':' declaredType=TypeLiteral)? (valueSpecificationType=ValueSpecificationTypes valueExpr=Expression)?
	;
	// validation: either the type, the value or both must be declared, must match and the value should be observable	[√]
	// (TODO  straighten spec out)

enum ValueSpecificationTypes returns ValueSpecificationTypes:
	  initialization=':='
	| invariant='=='
	;


/*
 * +------------+
 * | referables |
 * +------------+
 */

Referable returns Referable:	// (synthetic type)
	Value | Parameter | IteratorVariable | Method
	;
	/*
	 * scoping: referables must come from local context
	 * 
	 * locality:
	 * 		- within ListElement: 			index-variables + (outer:) values + parameters + top-level methods	[√]
	 * 		- within DefinedViewable:		values + parameters + top-level methods								[√]
	 * 		- within Method(Definition):	parameters + top-level methods										[√]
	 * 		- within Statement:				preceding local values + scope from Method(Definition)				[√]		TODO  fix bug w.r.t. nested statement blocks? (not due to async block...)
	 * 		- within CallbackExpression:	preceding local values + scope from Element							[ ]		TODO  implement
	 */

IteratorVariable returns IteratorVariable:
	name=ID
	;


/*
 * +---------+
 * | methods |
 * +---------+
 */

Method returns Method:
	name=ID
	;

MethodDefinition returns MethodDefinition:
	'method' method=Method parameterList=ParameterList statementBlock=StatementBlock
	;
	/*
	 * semantics:
	 * 		The return value of a method is simply the value of the (evaluation of the) last statement - and likewise for the return type.
	 * 		In most cases, the return value will be null and its type will be Void - a method is a function if that's not the case.
	 * 		(Note that there's no return statement which'd make the statement flow more difficult to understand and analyse.)
	 */


/*
 * +------------+
 * | statements |
 * +------------+
 */

StatementBlock returns StatementBlock:
	{StatementBlock}
	'{'
		statements+=Statement*
	'}'
	;
	/*
	 * validation:	warning if #statements == 0			[√]
	 * 
	 * A StatementBlock is contained by the following features:
	 * 		MethodDefinition.statementBlock
	 * 		CallbackExpression.statementBlock
	 * 		IfStatement.thenBlock
	 * 		IfStatement.elseBlock
	 */

Statement returns Statement:	// (synthetic type)
	  NonExitingStatement
//	| ExitingStatement
	;
	// A Statement is always contained in a StatementBlock.

//ExitingStatement returns statements::ExitingStatement:
//	  GotoScreenStatement
//	;

NonExitingStatement returns statements::NonExitingStatement:
	  AssignmentOrExpressionStatement
	| IfStatement
	| LocalValueDeclarationStatement
	| ListRemoveStatement
	| ForStatement
	| UnsetStatement
	;

AssignmentOrExpressionStatement returns statements::AssignmentOrExpressionStatement:
	lhs=Expression ( operator=AssignmentOperator rhs=Expression )?
	;
	// TODO  split out specification according to whether rhs is null and again for != null according to operator (assignment vs. the others)
	/*
	 * validation:
	 * 		1-  lhs must be a valid left-hand side		[?]
	 * 		2-  lhs.type.isAssignableFrom(rhs.type)		[?]
	 * TODO  rework
	 */
	/*
	 * This beasty has wildly differing semantics depending on whether it represents
	 * 		*) a assigment			<=> rhs != null		(can also be a sum assignment)
	 * 		*) a lone expression 	<=> rhs == null		(with some restrictions on the exact expression type)
	 */
	// TODO  consider making this into an operator as sub type of Expression again - however, during last experiment this caused a lot of non-LL(*)-ness


enum AssignmentOperator returns statements::AssignmentOperator:
	  assign='<-'
	| add='+='
	| sub='-='
	;


ForStatement returns statements::ForStatement:
	'for' '('
		'(' indexVariable=IteratorVariable '->' valueVariable=IteratorVariable ')' 'in'
		listExpression=Expression
	')' thenBlock=StatementBlock
	;

ListRemoveStatement returns statements::ListRemoveStatement:
	"remove" "from" listExpr=Expression (("where" feature=[types::Feature] '==' valueExpr=Expression) | ("at" indexVariable=Expression))
	;
	/*
	 * scoping: feature in listExpr.type.listItemType.structure.features			[√]
	 * validation:
	 * 		1-  listExpr.type = [Structure]											[√]
	 * 		2-  if feature != null: feature.type.isAssignableFrom(valueExpr.type)	[√]
	 */



//GotoScreenStatement returns statements::GotoScreenStatement:
//	( 'goto' | 'goto-screen' ) viewable=[Viewable] => argumentList=ArgumentList
//	;
	// scoping: viewable == all(Viewable)-in-this-resource.filter[screen]	[√]
	/*
	 * Call syntax is now aligned with declaration syntax because '(..)' are required.
	 */

IfStatement returns statements::IfStatement:
	'if' '(' condition=Expression ')' thenBlock=StatementBlock ('else' elseBlock=StatementBlock)?
	;
	/*
	 * validation:
	 *		1-  condition must be boolean-typed								[√]
	 * 		2-  thenBlock.type.isAssignableFrom(elseBlock.type)				[√]
	 */


LocalValueDeclarationStatement returns statements::LocalValueDeclarationStatement:
	=> 'val' value=Value ( ':' declaredType=TypeLiteral )? '=' valueExpr=Expression
	;

UnsetStatement returns statements::UnsetStatement:
	'unset' lhs=Expression
	;
	/*
	 * validation:
	 * 		lhs must be a valid left-hand side that's nullable (optional)		[?]
	 */


/*
 * +-------------+
 * | expressions |
 * +-------------+
 */

Expression returns Expression:
	TernaryExpression
	;

TernaryExpression returns Expression:
	OrExpression ({expr::TernaryExpression.guard=current} '?' thenExpr=OrExpression ':' elseExpr=OrExpression)?
	;
	/* 
	 * validation:
	 * 		1-  guard must be boolean-typed						[√]
	 * 		2-  thenExpr and elseExpr must be type-compatible	[√]
	 */

OrExpression returns Expression:
	AndExpression ({expr::OrExpression.leftOperand=current} '||' rightOperand=AndExpression)*	// left-associative infix binary operator
	;
	// validation: leftOperand, rightOperand are Boolean-typed	[√]

AndExpression returns Expression:
	ComparisonExpression ({expr::AndExpression.leftOperand=current} '&&' rightOperand=ComparisonExpression)*	// left-associative infix binary operator
	;
	// validation: leftOperand, rightOperand are Boolean-typed	[√]

ComparisonExpression returns Expression:
	AdditiveExpression ({expr::ComparisonExpression.leftOperand=current} comparator=Comparator rightOperand=AdditiveExpression)*	// left-associative infix binary operator
	;
	// validation: leftOperand.type == rightOperand.type		[√]

enum Comparator returns expr::Comparator:
	  equals="=="
	| notEquals="!="
	| bigger=">"
	| biggerEquals=">="
	| smaller="<"
	| smallerEquals="<="
	| isIn="in"
	;

AdditiveExpression returns Expression:
	MultiplicativeExpression ({expr::AdditiveExpression.leftOperand=current} operator=AdditiveOperators rightOperand=MultiplicativeExpression)*	// left-associative infix binary operator
	;
	// validation: leftOperand, rightOperand must be numerically-typed	[√]

enum AdditiveOperators returns expr::AdditiveOperators:
	plus='+' | minus='-'
	;
	// TODO  overload the + to handle array types as well

MultiplicativeExpression returns Expression:
	NotExpression ({expr::MultiplicativeExpression.leftOperand=current} operator=MultiplicativeOperators rightOperand=NotExpression)*	// left-associative infix binary operator
	;
	// validation: leftOperand, rightOperand must be numerically-typed	[√]

enum MultiplicativeOperators returns expr::MultiplicativeOperators:
	mult='*' | div='/' | mod='%'
	;

NotExpression returns Expression:
	ServiceCallExpression | ({expr::NotExpression} '!' operand=NotExpression)
	;
	// validation: operand.type.booleanTyped							[√]


ServiceCallExpression returns Expression:
	FeatureAccessExpression | (
		{exprAux::ServiceCallExpression} 'call' service=[services::Service] '(' ( 'observe' '[' observeSites+=Expression* ']' )? input=Expression? ')'
		( '=>' callback=CallbackExpression ('@error:' errorCallback=CallbackExpression)? )?
	)
	;
	/*
	 * validation:
	 * 		1-  serviceId.inputType.isAssignableFrom(input.type)																		[√]
	 * 		2-  InterfaceCallExpression can only be a lone expression as a statement or the initialisation of a value declaration		[√]
	 */
	// TODO  more validation? e.g. callback and observeSites are "often" illegal
	// validation: serviceId."interface".inputType.isAssignableFrom(input.type)		[√]

FeatureAccessExpression returns Expression hidden():
	PrimaryExpression ({expr::FeatureAccessExpression.previous=current} '.' feature=[types::Feature])*	// left-associative infix binary operator
	;
	// scoping: feature in previous.type.features												[√]
	// validation: previous must be a FeatureAccessExpression or a ValueReferenceExpression		[√]
	// TODO  add invocation of member methods and such

// TODO  use an enum BuiltinMemberFunctions to add "member calls" to FeatureAccessExpression (and add a ton of validation)


PrimaryExpression returns Expression hidden(WS, ML_COMMENT, SL_COMMENT):	// (undo cascade of FeatureAccessExpression's hidden())
	  '(' Expression ')'
	| LiteralExpression
	| CallbackExpressions
	| StructureCreationExpression
	| ValueReferenceOrMethodCallExpression
	| DateExpression
	| BuiltinFunctionExpression
	| {expr::SelectionExpression} 'selection'
	;
	// validation: SelectionExpression may only be used within CalendarStatement.onSelect		[?]

DateExpression returns expr::DateExpression:
	  {expr::DateNowExpression} 'now'
	| {expr::DateTodayExpression} 'today'
	;

BuiltinFunctionExpression returns expr::BuiltinFunctionExpression:
	function=BuiltinFunctions '(' argument=Expression ('on' sortFeature=[types::Feature])? ')'
	;

enum BuiltinFunctions returns expr::BuiltinFunctions:
	  isSet
	| confirm
	| copyOf	// copy an object									Note: used for Blaasfunctie.nl!
	| toMillis	// convert a Date to milliseconds, for calculation
	| round		// rounds a Number to an Integer
	| sort      // sort a list
	| isValid	// validates some simple-typed lhs'es
	| id		// retrieves the (internal, generated) id of a structure as String
	;
	// TODO  consider adding a `bind` function which has the intent of making the value bound...
	/*
	 * scoping: sortFeature in argument.type.features
	 * validation:
	 * 		1-  value.type.textuallyTyped if function is 'alert' or 'confirm'								[√]
	 * 		2-  argument.type.dateTyped if function is 'toMillis'											[√]
	 * 		3-  argument.type.numberTyped if function is 'round'											[√]
	 * 		4-	!value.type.structureTyped if function is 'isSet' (warning)									[√]
	 * 		5-  argument.type.emailTyped if function is 'isValid'											[√]
	 * 		6-  argument.type.listTyped && argument.type.listItemType.structureTyped if function is 'sort'	[ ]
	 * 		7-  sortFeature != null iff function is 'sort'													[√]
	 * 		8-  value.type.structureTyped if function is 'id'												[√]
	 */
	// TODO  replace keyword-style expression(s) with implicitly imported functions

LiteralExpression returns Expression:
	  {expr::StringLiteralExpression} value=STRING
	| {expr::BooleanLiteralExpression} literal=BooleanLiterals
	| {expr::IntegerLiteralExpression} value=INT
	| {expr::NumberLiteralExpression} value=NumberLiteral
	| ListLiteralExpression
	| EnumerationLiteralExpression
	| DecisionExpression
	;
	// TODO  add a literal expression for strings that require HTML escaping?

ListLiteralExpression returns Expression:
	{expr::ListLiteralExpression}
	'[' members+=Expression* ']'
	;
	// validation: members (if any) must be compatible with each other - for now this means that everything must be compatible with the first member	[√]

EnumerationLiteralExpression returns expr::EnumerationLiteralExpression hidden():
	enumeration=[types::Enumeration] '::' literal=[types::EnumerationLiteral|EnumerationName]
	;
	// scoping: literal in enumeration.literals		[√]
	// TODO  make enumeration optional if it can be derived from (lhs) context? (seems to easily cause non-LL(*) behavior...)


// (re-def. of INT)
@Override
terminal INT returns ecore::EInt: '-'? ('0'..'9')+;

// (datatype rule)
NumberLiteral returns ecore::EBigDecimal hidden(): INT '.' INT;
	// Note that the decimal part is required.
	// TODO  fix problem with "negative" decimal part


enum BooleanLiterals returns expr::BooleanLiterals:
	^false /* default */ | ^true
	;


DecisionExpression returns expr::DecisionExpression:
	{expr::DecisionExpression}
	'decide' '{'
		cases+=DecisionCase*
		( 'default' ':' defaultValueExpr=Expression )?
	'}'
	;
	/*
	 * type: cases.head.valueExpr.type or defaultValueExpr.type							[√]
	 * validation:
	 * 		1-  !cases.empty (warning)													[√]
	 * 		2-  type.isAssignableFrom(defaultValueExpr.type)							[√]
	 */

DecisionCase returns expr::DecisionCase:
	'case' guardExpr=Expression ':' valueExpr=Expression
	;
	/*
	 * validation:
	 * 		1-  guardExpr.type.booleanTyped												[√]
	 * 		2-  containing(DecisionExpression).type.isAssignableFrom(guardExpr.type)	[√]
	 */


CallbackExpressions returns exprAux::CallbackExpressions:
	  CallbackExpression
	| {exprAux::CallbackResponseExpression} 'response'		// validation: only useable within callbacks	[√]
	| {exprAux::CallbackErrorResponseExpression} 'error'		// validation: only useable within callbacks	[√]
	;

CallbackExpression returns exprAux::CallbackExpression:
	statementBlock=StatementBlock
	;


StructureCreationExpression returns expr::StructureCreationExpression:
	'new' structure=[types::Structure] '(' assignments+=FeatureAssignment* ')'
	;
	// validation: features may not be duplicately assigned						[√]

FeatureAssignment returns expr::FeatureAssignment:
	feature=[types::Feature] '=' valueExpr=Expression
	;
	// scoping: feature in containing(StructureCreationExpression).features		[√]
	// validation: feature.type.isAssignableFrom(valueExpr.type)				[√]


ValueReferenceOrMethodCallExpression returns expr::ValueReferenceOrMethodCallExpression:
	ReferenceExpression ( {exprAux::MethodCallExpression.methodRef=current} => argumentList=ArgumentList )?
	;
	/*
	 * validation (on MethodCallExpression):
	 * 		1-  methodRef.ref must be a Method										[√]
	 * 		2-  all parameters of methodRef.ref are covered and no more than once	[√]
	 */
	// TODO  harden type calculation to deal with recursive call chains (+ validation?)


ReferenceExpression returns expr::ReferenceExpression:
	ref=[Referable]
	;
	// validation: ref cannot be a method if eContainer is not a MethodCallExpression	[√]

/*
 * TODO  consider adding a ValidID datatype rule and use that everywhere (including in cross-references: |ValidID)
 * 			instead of ID to allow certain keywords (such as password, email and when) as valid identifiers.
 */

