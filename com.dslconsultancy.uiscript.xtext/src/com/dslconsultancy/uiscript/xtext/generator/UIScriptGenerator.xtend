package com.dslconsultancy.uiscript.xtext.generator

import com.dslconsultancy.uiscript.core.Viewable
import com.dslconsultancy.uiscript.structural.UiModule
import com.dslconsultancy.uiscript.util.XtextUtil
import com.dslconsultancy.uiscript.xtext.generator.tsx.ParametrisablesTemplates
import com.dslconsultancy.uiscript.xtext.generator.tsx.TypeDefinitionsTemplates
import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

class UIScriptGenerator extends AbstractGenerator {

	@Inject extension XtextUtil
	@Inject extension ParametrisablesTemplates
	@Inject extension TypeDefinitionsTemplates

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val uiModule = resource.contents.head as UiModule;
		fsa.generateFile('''«resource.fileName».tsx''', uiModule.generateTsxForUiModule)
	}

	private def generateTsxForUiModule(UiModule it) {
		'''
		// Generated by UIScript - do not modify!

		«IF !typeDefinitions.empty»
			import {observable} from "mobx";
		«ENDIF»
		«IF !parametrisables.filter(Viewable).empty»
			import {observer} from "mobx-react";
			import * as React from "react";
		«ENDIF»


		«IF !typeDefinitions.empty»
			// type definitions:

			«FOR typeDefinition : typeDefinitions»
				«typeDefinition.asTs»

			«ENDFOR»


		«ENDIF»
		«IF !parametrisables.empty»
			// parametrisables:

			«FOR parametrisable : parametrisables»
				«parametrisable.asTsx»

			«ENDFOR»
		«ENDIF»
		'''
	}

}
