@Ecore(nsURI="http://www.dslconsultancy.com/uicript/uidsl")
@GenModel(forceOverwrite="true", modelName="UIDsl", updateClasspath="false", complianceLevel="5.0")
package com.dslconsultancy.uiscript.uidsl

import com.dslconsultancy.uiscript.expressions.Expression
import com.dslconsultancy.uiscript.expressions.Referable
import com.dslconsultancy.uiscript.statements.StatementBlock
import com.dslconsultancy.uiscript.statements.ViewableCallSite
import com.dslconsultancy.uiscript.types.TypeLiteral


class UiModule {
	boolean notAuthenticated
	contains TopLevelDefinition[] definitions
}


abstract class TopLevelDefinition {
	contains ParameterList parameterList
}


abstract class Viewable extends TopLevelDefinition {
	ViewableTypes ^type
	String name
}

class DefinedViewable extends Viewable {
	contains ValuesBlock valuesBlock
	contains LocalViewableDefinition[] definitions
}

class ManualViewable extends Viewable {
	String namespace
}

abstract class LocalViewableDefinition {}

enum ViewableTypes {
	screen
	component = 1
}

class ValuesBlock {
	contains ValueDeclaration[] declarations
}

class ValueDeclaration extends AbstractValueDeclaration {
	ValueSpecificationTypes valueSpecificationType
}

enum ValueSpecificationTypes {
	initialization as "<-"
	^invariant as "=" = 1
}

class Value extends Referable {}

abstract class AbstractValueDeclaration {
	contains Value value
	contains TypeLiteral declaredType
	contains Expression valueExpr
}

class Parameter extends Referable {
	contains TypeLiteral ^type
}

class ParameterList {
	contains Parameter[] parameters
}

class MethodDefinition extends TopLevelDefinition, LocalViewableDefinition {
	contains Method method
	contains StatementBlock statementBlock
}

class Method extends Referable {}

class Element extends LocalViewableDefinition {}

class Quotation extends Element {
	contains Expression path
}

class Binding extends Element {
	contains Expression bindSite
}

class ElementBody {
	contains Element[] elements
}

class ComponentInvocation extends Element, ViewableCallSite {}

class Argument {
	refers Parameter parameter
	contains Expression valueExpr
}

class ArgumentList {
	contains Argument[] arguments
}

class InputElement extends Element {
	contains Expression bindSite
	String hint
	contains Expression minValue
	contains Expression maxValue
	contains RadioOption radioOption
	contains Expression onChange
	contains Expression onSubmit
	contains StructureOption structureOption
}

class RadioOption {
	String ^true
	String ^false
}

class StructureOption {
	contains Expression sourceExpr
	refers Method displayFunction
}

class ButtonElement extends Element {
	String text
	contains Expression action
	String cssClass
}

class BlockElement extends Element {
	contains Expression onClick
	String cssClass
	String bodyCssClass
	String style
	contains ElementBody header
	String headerCssClass
	boolean noCss
	contains ElementBody body
}

class ListElement extends Element {
	contains ListVariable indexVariable
	contains ListVariable valueVariable
	contains Expression listExpression
	contains ElementBody body
}

class ListVariable extends Referable {}

class GroupElement extends Element {
	GroupOrientations orientation
	VerticalAlignment verticalAlignment
	contains GroupElement[] nestedGroups
	contains ElementBody[] leafGroups
}

enum GroupOrientations {
	vertical
	horizontal = 1
}

enum VerticalAlignment {
	top
	bottom = 1
	middle = 2
}

class ObserveElement extends Element {
	contains Expression observeExpr
	contains StatementBlock statementBlock
}

class WhenElement extends Element {
	contains Expression condition
	contains ElementBody body
}

class ImageElement extends Element {
	boolean observed
	contains Expression sourceUrl
	contains Expression width
	contains Expression height
}

