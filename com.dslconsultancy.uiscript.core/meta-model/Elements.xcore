@Ecore(nsURI="http://www.dslconsultancy.com/uicript/elements")
@GenModel(forceOverwrite="true", modelName="UIElements", updateClasspath="false", complianceLevel="5.0")
package com.dslconsultancy.uiscript.elements

import com.dslconsultancy.uiscript.core.Element
import com.dslconsultancy.uiscript.core.Expression
import com.dslconsultancy.uiscript.core.IteratorVariable
import com.dslconsultancy.uiscript.core.Method
import com.dslconsultancy.uiscript.core.StatementBlock
import com.dslconsultancy.uiscript.core.ViewableCallSite


/*
 * Definitions of all built-in elements.
 */


class Binding extends Element {
	contains Expression bindSite
}


class BlockElement extends Element {
	contains Expression onClick
	String cssClass
	String bodyCssClass
	String style
	contains ElementBody header
	String headerCssClass
	boolean noCss
	contains ElementBody body
}


class ButtonElement extends Element {
	String text
	contains Expression action
	String cssClass
}


class ComponentInvocation extends Element, ViewableCallSite {}


class GroupElement extends Element {
	GroupOrientations orientation
	VerticalAlignment verticalAlignment
	contains GroupElement[] nestedGroups
	contains ElementBody[] leafGroups
}

enum GroupOrientations {
	vertical
	horizontal = 1
}

enum VerticalAlignment {
	top
	bottom = 1
	middle = 2
}


class ImageElement extends Element {
	boolean observed
	contains Expression sourceUrl
	contains Expression width
	contains Expression height
}


class InputElement extends Element {
	contains Expression bindSite
	String hint
	contains Expression minValue
	contains Expression maxValue
	contains RadioOption radioOption
	contains Expression onChange
	contains Expression onSubmit
	contains StructureOption structureOption
}

class RadioOption {
	String ^true
	String ^false
}

class StructureOption {
	contains Expression sourceExpr
	refers Method displayFunction
}


class ListElement extends Element {
	contains IteratorVariable indexVariable
	contains IteratorVariable valueVariable
	contains Expression listExpression
	contains ElementBody body
}


class ObserveElement extends Element {
	contains Expression observeExpr
	contains StatementBlock statementBlock
}


class WhenElement extends Element {
	contains Expression condition
	contains ElementBody body
}


class Quotation extends Element {
	contains Expression path
}



class ElementBody {
	contains Element[] elements
}

